# factorial challenge

main requirements: - backend and frontend logic separated -> next js app - library to visualize charts - db with a table called metrics, in which there will be at least these fields -> timestamp, name and value. sqlite connected with prisma

features of the charts: - timeline (datetime in x-axis). last 28/14/7 days? at first it could be easier to implement, later it may be iterated to have timeselect - show averages per minute/hour/day

frontend work: - chart components thought to be as reusable as possible. Chart object with different types, selected by props? //https://itnext.io/chartjs-tutorial-with-react-nextjs-with-examples-2f514fdc130
.bar chart, x-axis date,
.line chart
.
.pie -> income % per category - install bootstrap to have some standard format // https://www.kindacode.com/article/how-to-correctly-use-bootstrap-5-in-next-js/ - time window selection -> last 28/14/7 days? - product name and avg selection
.product selection. dropdown // https://getbootstrap.com/docs/5.0/forms/select/
.average selection. radio button group as buttons // https://getbootstrap.com/docs/5.0/components/button-group/#checkbox-and-radio-button-groups - handle basic errors
.what happens when the info provided is empty, or no data is received...

backend: - function to convert timestamp to date - function to convert date to timestamp - function to get x axis values (last 28 days, last 14 or last 7 days) - api endpoints based on which metric and/or the selected average
./api/sales -> last 30 days sales
./api/sales?name=product1&avg=minute
./api/sales?name=product2avg=hour
./api/sales?name=product2avg=day - queries
.general
.selected product
.selected product and avg - handle basic errors
.wrong values. negative in value, for instance.
